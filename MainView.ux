<App Background="#eee">
	<Router ux:Name="router" />

	<JavaScript>
		var Observable = require('FuseJS/Observable');
		var Storage = require('FuseJS/Storage');

		var savedItems = Observable();

		function loadItems() {
			savedItems.clear();
			Storage.read("saveItems.txt").then(function(data) {
				var temp = JSON.parse(data);
				temp.forEach(function(item) {
					savedItems.add(item);
				});
			});	
		}

		function deleteItem(arg) {
			savedItems.remove(arg.data);

			Storage.write("saveItems.txt", JSON.stringify(savedItems.toArray()));
		}

		module.exports = {
			savedItems, loadItems, deleteItem,
			goDetailData: function(arg) {
				router.push("detailData", arg.data);
			}
		};
	</JavaScript>

	<ux:Include File="Resources.ux" />

	<ClientPanel>		
		<Circle ux:Name="menuToggle" Alignment="BottomRight" Color="#356a" Width="40" Height="40" Margin="10">
			<Text Color="#fff" FontSize="13" Value="Menu" Alignment="Center" />
			<WhileTrue ux:Name="Activated">
				<Change menuToggle.Color="Red" />
				<Draggable />
			</WhileTrue>

			<Tapped>
				<Toggle Target="onSidePanel" />
			</Tapped>
		</Circle>

		<DockPanel>
			<Navigator ux:Name="Contents" DefaultPath="welcomeAnimation">
				<welcomeAnimation ux:Template="welcomeAnimation" router="router" />
				<home ux:Template="home" router="router" />
				<searchData ux:Template="searchData" router="router" />
				<detailData ux:Template="detailData" router="router" />
				<conditionSearch ux:Template="conditionSearch" router="router" />
				<addingCondition ux:Template="addingCondition" router="router" />
				<modifyingCondition ux:Template="modifyingCondition" router="router" />
				<makingPage ux:Template="makingPage" router="router" />
				<scrollingAnimation ux:Template="scrollingAnimation" router="router" />
			</Navigator>
		
		</DockPanel>

		<SwipeGesture ux:Name="swipeRight" Direction="Right" Length="200" />
		<SwipingAnimation Source="swipeRight">
			<Set onSidePanel.Value="true" />
		</SwipingAnimation>

		<SwipeGesture ux:Name="swipeLeft" Direction="Left" Length="200" />
		<SwipingAnimation Source="swipeLeft">
			<Set onSidePanel.Value="false" />
		</SwipingAnimation>

		<WhileTrue ux:Name="onSidePanel">
			<Change sideMenu.Visibility="Visible" />
			<Change sideMenu.Offset="0, 0" Duration=".1" DurationBack=".05" />
			<Change Contents.Offset="40%, 0" Duration=".1" DurationBack=".05" />
		</WhileTrue>
	</ClientPanel>

	<DockPanel Background="#ddd" ux:Name="sideMenu" Width="40%" Offset="-40%, 0" Visibility="Hidden" Alignment="Left">
		<Rectangle Width="2" Color="#fff" Dock="Right"/>
		<StackPanel>
			<Rectangle Height="40" />
			<Rectangle Width="100%" Height="30" Color="#444" Margin="5">
				<Text Font="han" FontSize="20" Alignment="Center" Color="#fff" Value="저장 물건" />
				<Shadow />
			</Rectangle>

			<Each Items="{savedItems}">
				<SideMenuButton>
					<Clicked>
						<Callback Handler="{goDetailData}" />
						<Set onSidePanel.Value="false" />
					</Clicked>
				</SideMenuButton>
			</Each>
		</StackPanel>

		<WhileVisible>
			<Callback Handler="{loadItems}" />
		</WhileVisible>
	</DockPanel>
</App>